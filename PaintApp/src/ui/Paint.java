/**
 * PaintPanel
 */
package ui;

import static com.sun.javafx.geom.BaseBounds.BoundsType.RECTANGLE;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import static java.awt.SystemColor.TEXT;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
//import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.util.Stack;
import static javafx.scene.shape.DrawMode.LINE;
import javax.swing.SwingUtilities;
import model.NewShape;

public class Paint extends javax.swing.JPanel implements MouseMotionListener, MouseListener {

    /**
     * Creates new form Paint
     */
    private Color fillColor, currentColor;
    private NewShape s;
    private int inkPanelWidth;
    private int inkPanelHeight;
    private Main frame;
    private Stack<NewShape> shapes;
    private int x1, x2, y1, y2;
    private int grouped;
    private BasicStroke stroke = new BasicStroke((float) 2);

 //   private boolean dragged = false;

    private int activeTool = 9;
    
    private final int PENCIL_TOOL = 0;
    
    private final int LINE = 1;

    public Paint(Main frame) {
        initComponents();
        setBackground(Color.WHITE);
        setLocation(10, 10);
        currentColor = Color.BLACK;

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        inkPanelWidth = dim.width - 150;
        inkPanelHeight = dim.height - 160;

        //fillColor = Color.pink;
        addMouseMotionListener(this);
        this.frame = frame;
        this.shapes = new Stack<NewShape>();

        printPaintPanelSize(inkPanelWidth, inkPanelHeight);
        grouped = 1;
    }

    public void printCoords(MouseEvent e) {
        String posX = String.valueOf((int) e.getPoint().getX());
        String posY = String.valueOf((int) e.getPoint().getY());
        frame.getCoordinateBar().getCoordinates().setText(posX + ",  " + posY + " px");
    }

    public void printPaintPanelSize(int width, int height) {
        this.frame.getCoordinateBar().getFrameSize().setText(width + ",  " + height + " px");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void setFillColor(Color background) {
        this.fillColor = background;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        for (NewShape s : shapes) {
            g2.setColor(s.getColor());
            g2.setStroke(s.getStroke());
            if (s.getShape() == LINE) {
                g2.drawLine(s.getx1(), s.gety1(), s.getx2(), s.gety2());
            }
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        Color primary = currentColor;
//        Color secondary = fillColor;
//        if (SwingUtilities.isRightMouseButton(e)) {
//            primary = secondary;
//            secondary = currentColor;
//        }
        printCoords(e);
        x2 = e.getX();
        y2 = e.getY();
//       dragged = true;
        if (activeTool == PENCIL_TOOL) {
            shapes.push(new NewShape(x1, y1, x2, y2, primary, stroke, 1, grouped));
            repaint();
            x1 = x2;
            y1 = y2;
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        printCoords(e);
        x1 = e.getX();
        y1 = e.getY();
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
//        grouped++;
//        Color primary = currentColor;
//        Color secondary = fillColor;
//        if (SwingUtilities.isRightMouseButton(e)) {
//            primary = secondary;
//            secondary = currentColor;
//        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    public void setTool(int tool) {
        this.activeTool = tool;
    }

}
